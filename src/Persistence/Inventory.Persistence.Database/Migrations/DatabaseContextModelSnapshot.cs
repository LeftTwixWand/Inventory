// <auto-generated />
using System;
using Inventory.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inventory.Persistence.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("Inventory.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Category");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB")
                        .HasColumnName("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Inventory.Domain.Warehouses.Events.WarehouseEventBase", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<string>("WarehouseEventBase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WarehouseProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.HasIndex("WarehouseProductId");

                    b.ToTable("WarehouseEventBase");

                    b.HasDiscriminator<string>("WarehouseEventBase").HasValue("WarehouseEventBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Inventory.Domain.Warehouses.Warehouse", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.HasKey("ProductId");

                    b.ToTable("Warehouses", (string)null);
                });

            modelBuilder.Entity("Inventory.Domain.Warehouses.Events.ProductsMissedEvent", b =>
                {
                    b.HasBaseType("Inventory.Domain.Warehouses.Events.WarehouseEventBase");

                    b.HasDiscriminator().HasValue("ProductsMissedEvent");
                });

            modelBuilder.Entity("Inventory.Domain.Warehouses.Events.ProductsReceivedEvent", b =>
                {
                    b.HasBaseType("Inventory.Domain.Warehouses.Events.WarehouseEventBase");

                    b.HasDiscriminator().HasValue("ProductsReceivedEvent");
                });

            modelBuilder.Entity("Inventory.Domain.Warehouses.Events.ProductsShippedEvent", b =>
                {
                    b.HasBaseType("Inventory.Domain.Warehouses.Events.WarehouseEventBase");

                    b.HasDiscriminator().HasValue("ProductsShippedEvent");
                });

            modelBuilder.Entity("Inventory.Domain.Warehouses.Events.WarehouseCreatedEvent", b =>
                {
                    b.HasBaseType("Inventory.Domain.Warehouses.Events.WarehouseEventBase");

                    b.HasDiscriminator().HasValue("WarehouseCreatedEvent");
                });

            modelBuilder.Entity("Inventory.Domain.Warehouses.Events.WarehouseEventBase", b =>
                {
                    b.HasOne("Inventory.Domain.Warehouses.Warehouse", null)
                        .WithMany("DomainEvents")
                        .HasForeignKey("WarehouseProductId");
                });

            modelBuilder.Entity("Inventory.Domain.Warehouses.Warehouse", b =>
                {
                    b.Navigation("DomainEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
